##############################################################################
#
# Makefile
#
# Make program to build the basic library.
#
# Copyright (c) 1990-2007 Aldor Software Organization Ltd (Aldor.org).
#
##############################################################################
#
# Targets: all, junk, clean, quick
#
#    make all	-- make the basic library for the Aldor compiler
#    make junk	-- list files which are not part of the Aldor compiler
#    make clean -- remove generated files  (e.g. foo.c~)
#
# Parameters:  ALDORROOT
#
#    To override defaults do, e.g.,
#	 make -e ALDORROOT=/spad/local/aldor/rs all
#    or
#	 setenv ALDORROOT /spad/local/aldor/rs; setenv MAKEFLAGS e; make all
#
##############################################################################

SHELL	= /bin/sh

#
# Environment
#
# $(ALDORROOT) is retrieved from the environment
IncDir	= $(ALDORROOT)/include
LibDir	= $(ALDORROOT)/lib
BinDir	= $(ALDORROOT)/bin
SamDir	= $(ALDORROOT)/share/samples/libaxllib

ALDOR	= $(BinDir)/aldor
LAXLLIB	= $(LibDir)/libaxllib.al
LOBLIB	= $(LibDir)/libaxllib.a
BUILDARG = $(ALDORROOT)/toolbin/buildarg

AXLCDB	= -Wcheck -qno-del-assert # -Wdumb-import # -Wgc # -Qkillp # -Cargs=-g -Cargs='$$OPTS' -Fc -ffm #-Cargs=-g -Qno-cc -Ffm
AXLCDB	= -Wcheck -qno-del-assert # -Wdebugger -Mno-mactext
AXLFLAGS	= $(AXLCDB) # -Fc # -Wrtcache=-1 # -Qno-cc -Zprof

CP	= cp -p
RM	= rm -f

#
# Source lists
#
# AXL<i>... depends on AXL<i-1>...

IncSrcs	= axllib.as
AXL0Srcs= lang.as		\
	  machine.as		\
	  basic.as		\
	  axlcat.as		\
	  tuple.as		\
	  gener.as		\
	  ref.as		\
	  except.as		\
	  boolean.as		\
	  segment.as		\
	  sinteger.as		\
	  byte.as		\
	  hinteger.as		\
	  bpower.as		\
	  integer.as		\
	  pointer.as		\
	  char.as		\
	  list.as		\
	  langx.as		\
	  uarray.as		\
	  pkarray.as		\
	  parray.as		\
	  array.as		\
	  string.as		\
	  sfloat.as		\
	  dfloat.as		\
	  imod.as		

AXL1Srcs	= format.as		\
	  complex.as		\
	  ratio.as		\
	  efuns.as		\
	  partial.as		\
	  sort.as		\
	  oslow.as		\
	  fname.as		\
	  file.as		\
	  opsys.as		\
	  textwrit.as		\
	  textread.as		\
	  rtexns.as		\
	  fmtout.as		\
	  table.as		\
	  fprint.as		\
	  float.as		\
	  pfloat.as		\
	  ieeectl.as		\
	  object.as		\
	  fstring.as		\
	  debug.as		\


AXLSrcs	= $(AXL0Srcs) $(AXL1Srcs)

Sources	= $(IncSrcs) $(AXLSrcs)
Lists	= axlinc.lst axllib.lst

#
# Object lists
#

AXL0Aos	= $(LAXLLIB)(lang.ao)		\
	  $(LAXLLIB)(machine.ao)	\
	  $(LAXLLIB)(basic.ao)		\
	  $(LAXLLIB)(axlcat.ao)		\
	  $(LAXLLIB)(tuple.ao)		\
	  $(LAXLLIB)(gener.ao)		\
	  $(LAXLLIB)(ref.ao)		\
	  $(LAXLLIB)(except.ao)		\
	  $(LAXLLIB)(boolean.ao)	\
	  $(LAXLLIB)(segment.ao)	\
	  $(LAXLLIB)(sinteger.ao)	\
	  $(LAXLLIB)(byte.ao)		\
	  $(LAXLLIB)(hinteger.ao)	\
	  $(LAXLLIB)(bpower.ao)		\
	  $(LAXLLIB)(integer.ao)	\
	  $(LAXLLIB)(pointer.ao)	\
	  $(LAXLLIB)(char.ao)		\
	  $(LAXLLIB)(list.ao)		\
	  $(LAXLLIB)(langx.ao)		\
	  $(LAXLLIB)(uarray.ao)		\
	  $(LAXLLIB)(pkarray.ao)		\
	  $(LAXLLIB)(parray.ao)		\
	  $(LAXLLIB)(array.ao)		\
	  $(LAXLLIB)(string.ao)		\
	  $(LAXLLIB)(sfloat.ao)		\
	  $(LAXLLIB)(dfloat.ao)		\
	  $(LAXLLIB)(imod.ao)		

AXL0Objs	= $(LOBLIB)(lang.o)		\
	  $(LOBLIB)(machine.o)		\
	  $(LOBLIB)(basic.o)		\
	  $(LOBLIB)(axlcat.o)		\
	  $(LOBLIB)(tuple.o)		\
	  $(LOBLIB)(gener.o)		\
	  $(LOBLIB)(ref.o)		\
	  $(LOBLIB)(except.o)		\
	  $(LOBLIB)(boolean.o)		\
	  $(LOBLIB)(segment.o)		\
	  $(LOBLIB)(sinteger.o)		\
	  $(LOBLIB)(byte.o)		\
	  $(LOBLIB)(hinteger.o)		\
	  $(LOBLIB)(bpower.o)		\
	  $(LOBLIB)(integer.o)		\
	  $(LOBLIB)(pointer.o)		\
	  $(LOBLIB)(char.o)		\
	  $(LOBLIB)(list.o)		\
	  $(LOBLIB)(langx.o)		\
	  $(LOBLIB)(uarray.o)		\
	  $(LOBLIB)(pkarray.o)		\
	  $(LOBLIB)(parray.o)		\
	  $(LOBLIB)(array.o)		\
	  $(LOBLIB)(string.o)		\
	  $(LOBLIB)(sfloat.o)		\
	  $(LOBLIB)(dfloat.o)		\
	  $(LOBLIB)(imod.o)		\
	  $(LOBLIB)(mndWrite.o)		

AXL1Aos	= $(LAXLLIB)(format.ao)		\
	  $(LAXLLIB)(complex.ao)	\
	  $(LAXLLIB)(ratio.ao)		\
	  $(LAXLLIB)(efuns.ao)		\
	  $(LAXLLIB)(partial.ao)	\
	  $(LAXLLIB)(sort.ao)		\
	  $(LAXLLIB)(oslow.ao)		\
	  $(LAXLLIB)(fname.ao)		\
	  $(LAXLLIB)(file.ao)		\
	  $(LAXLLIB)(opsys.ao)		\
	  $(LAXLLIB)(textwrit.ao)	\
	  $(LAXLLIB)(textread.ao)	\
	  $(LAXLLIB)(rtexns.ao)		\
	  $(LAXLLIB)(fmtout.ao)		\
	  $(LAXLLIB)(table.ao)		\
	  $(LAXLLIB)(fprint.ao)		\
	  $(LAXLLIB)(pfloat.ao)		\
	  $(LAXLLIB)(float.ao)		\
	  $(LAXLLIB)(ieeectl.ao)	\
	  $(LAXLLIB)(object.ao)		\
	  $(LAXLLIB)(fstring.ao)	\
	  $(LAXLLIB)(debug.ao)		\

AXL1Objs	= $(LOBLIB)(format.o)		\
	  $(LOBLIB)(complex.o)		\
	  $(LOBLIB)(ratio.o)		\
	  $(LOBLIB)(efuns.o)		\
	  $(LOBLIB)(partial.o)		\
	  $(LOBLIB)(sort.o)		\
	  $(LOBLIB)(oslow.o)		\
	  $(LOBLIB)(fname.o)		\
	  $(LOBLIB)(file.o)		\
	  $(LOBLIB)(opsys.o)		\
	  $(LOBLIB)(textwrit.o)		\
	  $(LOBLIB)(textread.o)		\
	  $(LOBLIB)(rtexns.o)		\
	  $(LOBLIB)(fmtout.o)		\
	  $(LOBLIB)(table.o)		\
	  $(LOBLIB)(fprint.o)		\
	  $(LOBLIB)(pfloat.o)		\
	  $(LOBLIB)(float.o)		\
	  $(LOBLIB)(ieeectl.o)		\
	  $(LOBLIB)(object.o)		\
	  $(LOBLIB)(fstring.o)		\
	  $(LOBLIB)(debug.o)		\


Objects	= $(AXL0Objs) $(AXL1Objs) 
Aos	= $(AXL0Aos) $(AXL1Aos)

#
# Target lists
#
IncTargs = $(IncDir)/axllib.as
LibTargs = $(LAXLLIB) $(LOBLIB)

# Don't delete the libraries if a compilation fails.
.PRECIOUS: $(LibTargs)

#
# Generic targets
#
OKFILES	 = Makefile NMakefile descrip.mms $(Lists) $(Sources)

all:	$(Lists) $(IncTargs) $(LibTargs) 

ext:	otherlibs

junk:
	@ ls -d $(OKFILES) * | sort | grep -v CVS | uniq -u

clean:
	@ $(RM) *~

libclean:
	@ $(RM) $(IncTargs) $(LAXLLIB) $(LOBLIB)


axlinc.lst:	Makefile
	@echon "Making axlinc.lst..."
	@(for f in $(IncSrcs) ; do echo $$f ; done) | \
		sed -e 's/\.as//' > axlinc.lst
	@echo "done"

axllib.lst:	Makefile
	@echon "Making axllib.lst..."
	@(for f in $(AXLSrcs) ; do echo $$f ; done) | \
		sed -e 's/\.as//' > axllib.lst
	@echo "done"

lists:		$(Lists)
include:	$(IncTargs)
libaxllib:	$(LAXLLIB) $(LOBLIB)

otherlibs:
	for x in "" `$(BUILDARG) extra-libdirs` ; do 		\
		lib=$(ALDORROOT)/lib-$(MACHINE)$$x;		\
		if [ ! -d $$lib ] ; then  mkdir $$lib ; fi;	\
		sys=$(MACHINE)$$x;				\
		echo "mklib $$sys libaxllib" >> $(ALDORROOT)/lib-$$sys/runme.sh; \
		chmod 755 $(ALDORROOT)/lib-$$sys/runme.sh;		\
	done

#
# Samples
#
samples:	$(SamDir) $(Sources)
	@echon "Copying samples..."
	@for f in $(Sources) ; do \
		$(CP) $$f $(SamDir) ; done
	@echo "done"

$(SamDir):
	@echo "Making directory $(SamDir)."
	@mkdir $(SamDir)

#
# General dependencies
#
$(Objects) $(Aos):	$(ALDOR) $(IncTargs)
$(AXL1Objs) $(AXL1Aos):	$(AXL0Aos)

#
# Specific dependencies and rules
#
incaxllib    $(IncDir)/axllib.as:	   axllib.as
	$(CP) axllib.as	$(IncDir)/axllib.as


# The doranlib dependency ensures that doranlib gets called.
$(LAXLLIB):  $(AXL0Aos) $(AXL1Aos) doranlib	; @ echo doranlib $@
$(LOBLIB):  $(AXL0Objs) $(AXL1Objs) doranlib	; doranlib $@

doranlib:
	@echon

#
# AXL0Srcs
#
lang    $(LAXLLIB)(lang.ao): lang.as
	@doaldor lang axllib $(AXLFLAGS) -M no-ALDOR_W_WillObsolete

machine $(LAXLLIB)(machine.ao): machine.as
	@doaldor machine axllib $(AXLFLAGS) -laxllib

basic   $(LOBLIB)(basic.o) $(LAXLLIB)(basic.ao): basic.as
	@doaldor basic axllib $(AXLFLAGS) -laxllib -Q inline-limit:18

axlcat   $(LAXLLIB)(axlcat.ao): axlcat.as
	@doaldor axlcat axllib $(AXLFLAGS) -laxllib

langx    $(LAXLLIB)(langx.ao): langx.as
	@doaldor langx axllib $(AXLFLAGS)

rtexns  $(LAXLLIB)(rtexns.ao): rtexns.as
	@doaldor rtexns axllib $(AXLFLAGS)

tuple   $(LAXLLIB)(tuple.ao): tuple.as
	@doaldor tuple axllib $(AXLFLAGS)

gener   $(LAXLLIB)(gener.ao): gener.as
	@doaldor gener axllib $(AXLFLAGS)

ref   $(LAXLLIB)(ref.ao): ref.as
	@doaldor ref axllib $(AXLFLAGS)

except   $(LAXLLIB)(except.ao): except.as
	@doaldor except axllib $(AXLFLAGS)

boolean $(LAXLLIB)(boolean.ao): boolean.as
	@doaldor boolean axllib $(AXLFLAGS)

segment $(LAXLLIB)(segment.ao): segment.as
	@doaldor segment axllib $(AXLFLAGS)

byte    $(LAXLLIB)(byte.ao): byte.as
	@doaldor byte axllib $(AXLFLAGS)

hinteger $(LAXLLIB)(hinteger.ao): hinteger.as
	@doaldor hinteger axllib $(AXLFLAGS)

sinteger $(LAXLLIB)(sinteger.ao): sinteger.as
	@doaldor sinteger axllib $(AXLFLAGS)

bpower $(LAXLLIB)(bpower.ao): bpower.as
	@doaldor bpower axllib $(AXLFLAGS)

integer $(LAXLLIB)(integer.ao): integer.as
	@doaldor integer axllib $(AXLFLAGS)

pointer $(LAXLLIB)(pointer.ao): pointer.as
	@doaldor pointer axllib $(AXLFLAGS)

char    $(LAXLLIB)(char.ao): char.as
	@doaldor char axllib $(AXLFLAGS)

string  $(LAXLLIB)(string.ao): string.as
	@doaldor string axllib $(AXLFLAGS)

fstring  $(LAXLLIB)(fstring.ao): fstring.as
	@doaldor fstring axllib $(AXLFLAGS)

sfloat  $(LAXLLIB)(sfloat.ao): sfloat.as
	@doaldor sfloat axllib $(AXLFLAGS)

dfloat  $(LAXLLIB)(dfloat.ao): dfloat.as
	@doaldor dfloat axllib $(AXLFLAGS)

imod  $(LAXLLIB)(imod.ao): imod.as
	@doaldor imod axllib $(AXLFLAGS)

fmdarray $(LAXLLIB)(fmdarray.ao): fmdarray.as
	@doaldor fmdarray axllib $(AXLFLAGS)

#
# AXL1Srcs
#
format $(LAXLLIB)(format.ao): format.as
	@doaldor format axllib $(AXLFLAGS)

complex $(LAXLLIB)(complex.ao): complex.as
	@doaldor complex axllib $(AXLFLAGS)

ratio $(LAXLLIB)(ratio.ao): ratio.as
	@doaldor ratio axllib $(AXLFLAGS)

list $(LAXLLIB)(list.ao): list.as
	@doaldor list axllib $(AXLFLAGS)

list2 $(LAXLLIB)(list2.ao): list2.as
	@doaldor list2 axllib $(AXLFLAGS)

uarray $(LAXLLIB)(uarray.ao): uarray.as
	@doaldor uarray axllib $(AXLFLAGS)

pkarray $(LAXLLIB)(pkarray.ao): pkarray.as
	@doaldor pkarray axllib $(AXLFLAGS)

parray $(LAXLLIB)(parray.ao): parray.as
	@doaldor parray axllib $(AXLFLAGS)

array $(LAXLLIB)(array.ao): array.as
	@doaldor array axllib $(AXLFLAGS)

efuns $(LAXLLIB)(efuns.ao): efuns.as
	@doaldor efuns axllib $(AXLFLAGS)

partial $(LAXLLIB)(partial.ao): partial.as
	@doaldor partial axllib $(AXLFLAGS)

sort $(LAXLLIB)(sort.ao): sort.as
	@doaldor sort axllib $(AXLFLAGS)

fname $(LAXLLIB)(fname.ao): fname.as
	@doaldor fname axllib $(AXLFLAGS)

file $(LAXLLIB)(file.ao): file.as
	@doaldor file axllib $(AXLFLAGS)

opsys $(LAXLLIB)(opsys.ao): opsys.as
	@doaldor opsys  axllib $(AXLFLAGS)

oslow $(LAXLLIB)(oslow.ao): oslow.as
	@doaldor oslow axllib $(AXLFLAGS)

textwrit $(LAXLLIB)(textwrit.ao): textwrit.as 
	@doaldor textwrit axllib $(AXLFLAGS)

textread $(LAXLLIB)(textread.ao): textread.as 
	@doaldor textread  axllib $(AXLFLAGS)

fmtout $(LAXLLIB)(fmtout.ao): fmtout.as
	@doaldor fmtout  axllib $(AXLFLAGS)

table $(LAXLLIB)(table.ao): table.as
	@doaldor table  axllib $(AXLFLAGS)

fprint $(LAXLLIB)(fprint.ao): fprint.as
	@doaldor fprint axllib $(AXLFLAGS) -Q inline-limit:2.4

float $(LAXLLIB)(float.ao): float.as
	@doaldor float axllib $(AXLFLAGS) -Q inline-limit:2.4

pfloat $(LAXLLIB)(pfloat.ao): pfloat.as
	@doaldor pfloat axllib $(AXLFLAGS) -Q inline-limit:2.4

ieeectl $(LAXLLIB)(ieeectl.ao): ieeectl.as
	@doaldor ieeectl axllib $(AXLFLAGS)

object $(LAXLLIB)(object.ao): object.as
	@doaldor object axllib $(AXLFLAGS)

debug $(LAXLLIB)(debug.ao): debug.as
	@doaldor debug axllib $(AXLFLAGS)

